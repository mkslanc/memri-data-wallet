Message {
    title: {{.title or "Untitled" }}
    defaultRenderer: custom
    editActionButton: toggleEditMode
    filterButtons: [
        openView {
            icon: "increase.indent"
            title: "Show Timeline"
            
            view: {
                defaultRenderer: timeline
                
                [datasource = pod] {
                    query: "AuditItem AND ANY allEdges.targetItemID = {.uid}"
                    sortProperty: dateCreated
                    sortAscending: true
                }
                
                [renderer = timeline] {
                    timeProperty: dateCreated
                }
            }
        }
        showContextPane
    ]
    
    contextPane {
        buttons: star schedule
        
        actions: [
            showOverlay { title: "Share with..." }
            addToPanel { title: "Add to list..." }
            duplicate { title: "Duplicate Note" }
        ]
        
        navigate: [
            openView {
                title: "Timeline of this note"
                view: {
                    defaultRenderer: timeline
                    
                    [datasource = pod] {
                        query: "AuditItem AND ANY allEdges.targetItemID = {.uid}"
                        sortProperty: dateCreated
                        sortAscending: true
                    }
                    
                    [renderer = timeline] {
                        timeProperty: dateCreated
                    }
                }
            }
            openViewByName {
                title: "Starred notes"
                viewName: "filter-starred"
                viewArguments: {
                    include: "all-notes"
                }
            }
            openSessionByName {
                title: "All notes"
                sessionName: "all-notes"
            }
        ]
    }
    
    [renderer = custom] {
        RichTextfield {
            content: {{.content}}
            title: {{.title}}
            fontSize: 18
        }
    }
}
 
Message > list {
    onPress: openView {
        viewName: messageChannelView
        inheritDatasource: false
        viewArguments {
            channelUID: {{.messageChannel.uid}}
            channel: {{.messageChannel}}
        }
    }

    HStack {
        alignment: {{ .sender.owner = me OR .sender.isMe ? "right" : "left" }}
        fillWidth: true
        padding: {{ .sender.owner = me OR .sender.isMe ? "0 0 0 20" : "0 60 0 0" }}
        
        VStack {
            maxWidth: 300
            spacing: 2
            padding: 5
            background: {{ .sender.owner = me OR .sender.isMe ? "purpleBackground" : "#eeeeee" }}
            cornerRadius: 5
            
            Text {
                show: {{ .sender.owner != me }}
                text: "{.sender.displayName}"
                font: 12 bold
                color: secondary
                lineLimit: 1
            }
            
            HStack {
                show: {{.message}}
                background: tertiaryBackground
                border: #f00 3 /* TODO: Left border only */
                cornerRadius: 3
                
                VStack {
                    padding: 6
                    
                    Text {
                        text: "{.message.displayName}"
                        font: 12 bold
                        color: #743a4c
                        lineLimit: 1
                    }
                    
                    SmartText {
                        text: "{.message.photo ? '[Photo] ' : ''}{.message.content.plainString()}"
                        color: secondary
                        font: 12 regular
                        padding: 6
                        maxLines: 2
                    }
                }
                
                Image {
                    show: {{.message.photo}}
                    image: {{.message.photo}}
                    sizingMode: fit
                    cornerRadius: 3
                    maxHeight: 60
                    maxWidth: 60
                }
            }
            
            Button {
                show: {{.photo}}
                onPress: openView {
                    renderer: photoViewer
                }
                
                Image {
                    image: {{.photo}}
                    sizingMode: fit
                    cornerRadius: 5
                    maxWidth: 250
                }
            }
            
            SmartText {
                show: {{.content}}
                text: {{.content.plainString()}}
                font: 16 regular
                color: primary
                maxLines: 100
                margin: 3
            }
            
            Text {
                font: 10 bold /* TODO: caption?? */
                color: secondary
                text: "{.dateSent OR .dateModified}"
                lineLimit: 1
            }
        }
    }
}

.allMessages {
    defaultRenderer: messages
    filterButtons: showStarred toggleFilterPanel
    
    [datasource = pod] {
        query: "Message"
    }
        
    [renderer = list] {
        spacing: 8
    }
    
    [renderer = messages] {
        background: background
        spacing: 8
    }
    
}

Message > photoViewer {
    file: {{.photo.file}}
}

Message > timeline {
    onPress: openView {
        viewName: messageChannelView
        inheritDatasource: false
        viewArguments {
            channelUID: {{.messageChannel.uid}}
            channel: {{.messageChannel}}
        }
    }
    
    TimelineItem {
        icon: "bubble.left.fill"
        title: {{.sender.owner.fullName()}}
        text: {{.content.plainString()}}
    }
}
