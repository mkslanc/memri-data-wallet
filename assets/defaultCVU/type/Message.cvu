Message {
    title: {{.title or "Untitled" }}
    defaultRenderer: custom
    editActionButton: toggleEditMode
    cols: 6
    filterButtons: [
        openView {
            icon: "increase.indent"
            title: "Show Timeline"
            
            view: {
                defaultRenderer: timeline
                
                [datasource = pod] {
                    query: "AuditItem AND ANY allEdges.targetItemID = {.uid}"
                    sortProperty: dateCreated
                    sortAscending: true
                }
                
                [renderer = timeline] {
                    timeProperty: dateCreated
                }
            }
        }
        showContextPane
        ]

        contextPane {
            buttons: star schedule

            actions: [
                showOverlay { title: "Share with..." }
                addToPanel { title: "Add to list..." }
                duplicate { title: "Duplicate Note" }
                ]

                navigate: [
                    openView {
                        title: "Timeline of this note"
                        view: {
                            defaultRenderer: timeline

                            [datasource = pod] {
                                query: "AuditItem AND ANY allEdges.targetItemID = {.uid}"
                                sortProperty: dateCreated
                                sortAscending: true
                            }

                            [renderer = timeline] {
                                timeProperty: dateCreated
                            }
                        }
                    }
                    openViewByName {
                        title: "Starred notes"
                        viewName: "filter-starred"
                        viewArguments: {
                            include: "all-notes"
                        }
                    }
                    openSessionByName {
                        title: "All notes"
                        sessionName: "all-notes"
                    }
                    ]
        }

        [renderer = custom] {
            RichTextfield {
                content: {{.content}}
                title: {{.title}}
                fontSize: 18
            }
        }
}

Message > list {

    VStack {
        alignment: topleft
        HStack {
            alignment: left

            Image {
                image: {{.sender.owner.profilePicture or .sender.profilePicture or "assets/images/person.png"}}
                sizingMode: fill
                minHeight: 30
                maxHeight: 30
                minWidth: 30
                maxWidth: 30
                cornerRadius: 50
            }


            Text {
                text: {{.sender.owner.fullName() or .sender.displayName }}
                font: 12 regular
                color: #737373
            }

            Spacer

            Text {
                text: "{.dateSent}"
                color: #989898
                font: 10 regular
                padding: 0 19 0 0
            }

            Image {
                systemName: "ellipsis"
                color: #DFDEDE
                font: 24 light
                padding: 5 0 5 0
            }
        }

        Button {
            show: {{.photo}}
            onPress: openView {
                renderer: photoViewer
                viewArguments {
                    mainView: false
                }
            }

            Image {
                image: {{.photo}}
                sizingMode: fit
                cornerRadius: 5
                maxWidth: 250
            }
        }

        SmartText {
            show: {{.content}}
            text: {{.content.plainString()}}
            font: bodyText2
            color: #333333
            padding: 0 0 30 0
        }

    }

}

.allMessages {
    defaultRenderer: messages
    filterButtons: showStarred toggleFilterPanel

    [datasource = pod] {
        query: "Message"
    }

    [renderer = list] {
        spacing: 8
    }
    
    [renderer = messages] {
        background: background
        spacing: 8
    }
    
}

Message > photoViewer {
    file: {{.photo.file}}
}

Message > timeline {
    onPress: openView {
        viewName: messageChannelView
        inheritDatasource: false
        viewArguments {
            channelUID: {{.messageChannel.uid}}
            channel: {{.messageChannel}}
        }
    }
    
    TimelineItem {
        icon: "bubble.left.fill"
        title: {{.sender.owner.fullName()}}
        text: {{.content.plainString()}}
    }
}
