Note > list {
    onPress: openView {
        renderer: singleItem
        clearStack: true
        inheritDatasource: false
        viewArguments {
            mainView: false
        }
    }

    HStack {
        alignment: left
        spacing: 15

        Image {
            bundleImage: "file-text"
            isVector: true
            sizingMode: fill
            minHeight: 30
            maxHeight: 30
            minWidth: 30
            maxWidth: 30
        }


        Text {
            text: {{.title.plainString() or "Untitled"}}
            lineLimit: 1
            font: 12 regular
            color: #737373
        }

        Spacer
        Image {
            systemName: "ellipsis"
            color: #DFDEDE
            font: 24 light
            padding: 5 0 5 0
        }
    }
}

Note > grid {
    onPress: openView {
        renderer: noteEditor
    }

    VStack {
        minWidth: 10
        padding: 0 0 5 0
        alignment: center

        Text {
            text: "{.content.plainString()}"
            allowNil: true
            maxChar: 100
            lineLimit: 3
            color: #333
            background: #fff
            border: #efefef 2
            cornerRadius: 10
            padding: 10
            font: 9 regular
            minHeight: 40
            idealHeight: 80
            alignment: left top
        }
        HStack {
            alignment: center
            Text {
                text: {{.title.plainString() or "Untitled"}}
                padding: 5 0 0 0
                color: primary
                font: 12 semibold
                maxChar: 100
                lineLimit: 1
            }
            Image {
                systemName: "star.fill"
                font: 10
                color: yellow
                margin: 8 0 0 2
                show: {{.starred}}
            }
        }
        Text {
            text: "{.dateModified}"
            font: 9 regular
            color: secondary
            padding: 3 0 0 0
        }
    }
}

Note > timeline {
    onPress: openView {
        renderer: noteEditor
    }

    TimelineItem {
        icon: "square.and.pencil"
        title: {{.title.plainString() or "Untitled"}}
        text: {{.content.plainString()}}
    }
}

.allNotes {
    name: "all-notes"
    title: "All Notes"
    emptyResultText: "There are no notes here yet"
    defaultRenderer: list
    sortFields: title dateModified dateAccessed dateCreated
    cols: 6

    [datasource = pod] {
        query: "Note"
        sortProperty: title
        sortAscending: true
    }

    actionButton:
    addItem {
        template {
            _type: Note
        }
    }

    editActionButton: toggleEditMode
    filterButtons: showStarred toggleFilterPanel

    [renderer = list] {
        contextMenu: [
            showOverlay { title: "Share" }
            addToPanel { title: "Add to list" }
            duplicate { title: "Duplicate" }
            ]
    }

    [renderer = grid] {
        edgeInset: 10 10 10 10
        spacing: 10
    }

    [renderer = calendar] {
        background: background
        color: red /* set the primary color to red */
    }

    [renderer = timeline] {
        timeProperty: {{.dateModified}}
        detailLevel: hour
    }
}

Note > NoteEditor {
    title: {{.title}}
    content: {{.content}}
}

Note {
    defaultRenderer: noteEditor
    editActionButton: toggleEditMode
    cols: 6

    filterButtons: [
        openView {
            icon: "increase.indent"
            title: "Show Timeline"

            view: {
                defaultRenderer: timeline

                [datasource = pod] {
                    query: "AuditItem AND ANY allEdges.targetItemID = {.uid}"
                    sortProperty: dateCreated
                    sortAscending: true
                }

                [renderer = timeline] {
                    timeProperty: dateCreated
                }
            }
        }
        showContextPane
        ]

        contextPane {
            buttons: star schedule

            actions: [
                showOverlay { title: "Share with..." }
                addToPanel { title: "Add to list..." }
                duplicate { title: "Duplicate Note" }
                ]

                navigate: [
                    openView {
                        title: "Timeline of this note"
                        view: {
                            defaultRenderer: timeline

                            [datasource = pod] {
                                query: "AuditItem AND ANY allEdges.targetItemID = {.uid}"
                                sortProperty: dateCreated
                                sortAscending: true
                            }

                            [renderer = timeline] {
                                timeProperty: dateCreated
                            }
                        }
                    }
                    openViewByName {
                        title: "Starred notes"
                        viewName: "filter-starred"
                        viewArguments: {
                            include: "all-notes"
                        }
                    }
                    openSessionByName {
                        title: "All notes"
                        sessionName: "all-notes"
                    }
                    ]
        }

        [renderer = noteEditor] {
            content: {{.content}}
            title: {{.title}}
        }
}

Note > singleItem {

    VStack {
        alignment: topleft
        padding: 0 150 0 0

        Text {
            text: "{.title}"
            font: headline2
            color: #333333
            padding: 0 0 10 0
        }

        Divider

        HStack {
            show: {{.~file.~photo.author.owner.fullName() or .~file.~photo.author.displayName }}
            alignment: left

            Image {
                image: {{.~file.~photo.author.owner.profilePicture or "assets/images/person.png"}}
                sizingMode: fill
                minHeight: 30
                maxHeight: 30
                minWidth: 30
                maxWidth: 30
                cornerRadius: 50
            }


            Text {
                text: {{.~file.~photo.author.owner.fullName() or .~file.~photo.author.displayName }}
                font: 12 regular
                color: #737373
            }

            Spacer

            Text {
                text: "{.~file.~photo.postDate}"
                color: #989898
                font: 10 regular
                padding: 0 19 0 0
            }

            Image {
                systemName: "ellipsis"
                color: #DFDEDE
                font: 24 light
                padding: 5 0 5 0
            }
        }

        Text {
            text: "{.content.plainString()}"
            font: bodyText2
        }

    }
}


