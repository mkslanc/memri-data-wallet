
[language = "English"] {
    sharewith: "Share with..."
    addtolist: "Add to list..."
    duplicate: "Duplicate"
    showtimeline: "Show Timeline"
    timelineof: "Timeline of this"
    starred: "Starred"
    all: "All"
}
[language = "Dutch"] {
    sharewith: "Deel met..."
    addtolist: "Voeg toe aan lijst..."
    duplicate: "Dupliceer"
    showtimeline: "Toon Tijdslijn"
    timelineof: "Tijdslijn van deze"
    starred: "Favoriete"
    all: "Alle"
}

.defaultButtonsForItem {
    editActionButton: toggleEditMode
    filterButtons: [
        openView {
            icon: "increase.indent"
            title: "{$showtimeline}"

            view: {
                defaultRenderer: timeline

                [datasource = pod] {
                    query: "AuditItem AND ANY allEdges.targetItemID = {.uid}"
                    sortProperty: dateCreated
                    sortAscending: true
                }

                [renderer = timeline] {
                    timeProperty: dateCreated
                }
            }
        }
        showContextPane
        ]

        contextPane {
            buttons: star schedule

            actions: [
                showOverlay { title: "{$sharewith}" }
                addToPanel { title: "{$addtolist}" }
                duplicate { title: "{$duplicate} {type}" }
                ]

                navigate: [
                    openView {
                        title: "{$timelineof} {type.lowercased()}"
                        view: {
                            defaultRenderer: timeline

                            [datasource = pod] {
                                query: "AuditItem AND ANY allEdges.targetItemID = {.uid}"
                                sortProperty: dateCreated
                                sortAscending: true
                            }

                            [renderer = timeline] {
                                timeProperty: dateCreated
                            }
                        }
                    }
                    openViewByName {
                        title: "{$starred} {type.plural()}"
                        viewName: "filter-starred"
                        viewArguments: {
                            include: "all-{type}"
                        }
                    }
                    openViewByName {
                        title: "{$all} {type.lowercased().plural()}"
                        viewName: "all-{type}"
                    }
                    ]
        }
}

Person {
    defaultRenderer: singleitem
    showTopBar: false

    /*include:
    "defaultButtonsForItem" { type: Person }*/

    editActionButton: toggleEditMode
    filterButtons: [
        openView {
            icon: "increase.indent"
            title: "{$showtimeline}"

            view: {
                defaultRenderer: timeline

                [datasource = pod] {
                    query: AuditItem
                    filter: {
                        edgeSources: {
                            changelog: {{uid}}
                        }
                    }
                }

                [renderer = timeline] {
                    timeProperty: dateCreated
                }
            }
        }
        openView {
            icon: "calendar"
            title: "{$showtimeline}"

            view: {
                defaultRenderer: timeline

                [datasource = pod] {
                    query: EmailMessage Message Note Photo
                    edgeTargetsOperator: "OR"
                    filter: {
                        edgeTargets: {
                            sender: {{.account.uid}}
                            includes: {{uid}}
                        }
                    }
                }

                [renderer = timeline] {
                    timeProperty: dateCreated
                }
            }
        }
        showContextPane
        ]

        contextPane {
            title: "{.firstName} {.lastName}"
            buttons: star schedule
            changeLog: "{.describeChangelog()}"

            navigate: [
                openView {
                    title: "Person"
                    renderer: generalEditor
                    view: {
                        defaultRenderer: timeline

                        [datasource = pod] {
                            query: "AuditItem AND ANY allEdges.targetItemID = {.uid}"
                            sortProperty: dateCreated
                            sortAscending: true
                        }

                        [renderer = timeline] {
                            timeProperty: dateCreated
                        }
                    }
                }
                openViewByName {
                    title: "{$starred} {type.plural()}"
                    viewName: "filter-starred"
                    renderer: "grid"
                    viewArguments: {
                        include: "all-{type}"
                    }
                }
                openSessionByName {
                    title: "All Persons"
                    sessionName: "all-person"
                }
                ]

                labels: {{ .label[] }}
        }


        /* end include */

        [renderer = generalEditor] {
            layout: [
                { section: profilePicture, exclude: labels }
                { section: names, fields: firstName lastName }
                { section: picturesOfPerson }
                { section: phoneNumbers, edges: hasPhoneNumber, type: PhoneNumber }
                { section: relationships, edges: relationship, type: Person }
                { section: addresses, edges: address, type: Address }
                { section: websites, edges: website, type: Website }
                { section: companies, edges: company, type: Company }
                { section: diets, edges: diet, type: Diet }
                { section: medicalConditions, edges: medicalCondition, type: MedicalCondition }
                { section: cryptoKeys, edges: cryptoKey, type: CryptoKey }
                { section: onlineProfiles, edges: onlineProfile, type: OnlineProfile }
                { section: other, fields: * }
                { section: dates }
                { section: changeLog }
                ]

                profilePicture {
                    showTitle: false

                    HStack {
                        alignment: center
                        minHeight: 180
                        maxHeight: 180

                        ZStack {
                            border: #fff 27
                            padding: 12
                            maxWidth: 140
                            maxHeight: 140
                            cornerRadius: 25
                            alignment: center

                            Image {
                                image: {{.profilePicture}}
                                sizingMode: fill
                            }

                            HStack {
                                alignment: center
                                maxWidth: 140
                                maxHeight: 140
                                show: {{!readOnly}}

                                ActionButton {
                                    cornerRadius: 25
                                    maxWidth: 50
                                    maxHeight: 50
                                    background: #eee
                                    color: #434343
                                    alignment: center
                                    font: 14 regular

                                    onPress: openViewByName {
                                        renderAs: popup
                                        title: "Edit"

                                        viewName: "itemByQuery"
                                        viewArguments: {
                                            query: "Photo"
                                            type: Photo
                                            renderer: "grid"
                                            edgeType: "profilePicture"
                                            distinct: true
                                            title: "Choose a photo"
                                            editMode: false
                                            onPress: [
                                                link {
                                                    subject: {{subject}}
                                                    edgeType: {{edgeType}}
                                                    distinct: {{distinct}}
                                                }
                                                closePopup
                                                ]
                                        }
                                    }
                                }
                            }
                        }

                        VStack {
                            spacing: 6
                            Text {
                                font: 20 bold
                                text: "{.firstName} {.lastName}"
                            }

                            Text {
                                show: {{ !.label }}
                                text: "no labels yet"
                            }

                            FlowStack {
                                spacing: 5
                                list: {{ .label[] }}

                                button {
                                    onPress: openView {
                                        viewName: "allItemsWithLabel"
                                        viewArguments: {
                                            name: "{.name}"
                                            uid: {{.uid}}
                                        }
                                    }

                                    VStack {
                                        background: {{.color}}
                                        cornerRadius: 5

                                        Text {
                                            text: "{.name}"
                                            font: 16 semibold
                                            color: #fff
                                            padding: 5 8 5 8
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                picturesOfPerson {
                    title: "Photos of {.firstName} {.lastName}"

                    Grid {
                        height: 200
                        minColumnHeight: 80
                        spacing: 1
                        items: {{.~includes[]}}
                        emptyResultText: "There are no photos here yet"

                        ForEach {
                            items: {{.~includes[]}}
                            Image {
                                image: {{.file}}
                                sizingMode: fill
                                background: background
                                width: 90
                            }
                        }
                    }
                }

                cryptoKeys {
                    EditorRow {
                        title: "{.name}"

                        Text {
                            text: "{.key}"
                        }
                    }
                }

                onlineProfiles {
                    EditorRow {
                        title: "{.itemType}"

                        VStack {
                            cornerRadius: 5

                            Text {
                                text: "{.handle}"
                            }
                        }
                    }
                }

                changeLog {
                    title: "Change Log"

                    SubView {
                        height: 165

                        view {
                            viewName: AuditItem
                            defaultRenderer: list

                            [datasource = pod] {
                                query: AuditItem
                                filter: {
                                    edgeSources: {
                                        changelog: {{uid}}
                                    }
                                }
                            }

                            arguments: {
                                showToolbar: false
                                showBottomBar: false
                                readOnly: true
                            }
                        }

                    }
                }
        }

        [renderer = timeline] {
            timeProperty: dateCreated
        }
}

Person > singleitem {
    VStack {
        alignment: topleft

        VStack {
            alignment: left
            ZStack {
                alignment: bottomright
                Image {
                    image: {{.profilePicture}}
                    sizingMode: fill
                }


                ActionButton {
                    onPress: star

                }

            }

            Text {
                padding: 27 0 0 33
                font: headline1
                text: "{.firstName} {.lastName}"
            }

            HStack {
                padding: 31 0 0 20
                spacing: 10

                Button {
                    background: white
                    width: 172
                    height: 80

                    VStack {
                        padding: 27 0 0 10

                        Text {
                            text: "CONTACT DETAILS"
                            font: tile_label
                            color: black
                        }
                    }

                    onPress: openView {
                        renderer: generalEditor
                    }
                }

                Button {
                    background: white
                    width: 172
                    height: 80

                    VStack {
                        alignment: topright
                        padding: 27 0 0 10

                        Text {
                            text: "SOCIAL MEDIA UPDATES"
                            font: tile_label
                            color: black
                        }
                    }

                    onPress: openView {
                        view: {
                            defaultRenderer: list

                            [datasource = pod] {
                                query: Post
                                edgeTargetsOperator: "OR"
                                filter: {
                                    edgeTargets: {
                                        author: {{.account[]}}
                                        author: {{.~owner[]}}
                                    }
                                }
                            }

                            [renderer = timeline] {
                                timeProperty: dateCreated
                            }
                        }
                    }
                }
            }

            HStack {
                padding: 10 0 0 20
                spacing: 10

                Button {
                    background: white
                    width: 172
                    height: 80

                    VStack {
                        alignment: topright
                        padding: 10 0 0 31

                        Text {
                            text: "INTERACTIONS"
                            font: tile_label
                            color: black
                        }
                    }

                    onPress: openView {
                        viewName: "allPosts"
                    }
                }

                Button {
                    background: white
                    width: 172
                    height: 80

                    VStack {
                        alignment: topright
                        padding: 10 0 0 31

                        Text {
                            text: "TIMELINE"
                            font: tile_label
                            color: black
                        }
                    }

                    onPress: openView {
                        title: "{$showtimeline}"

                        view: {
                            defaultRenderer: timeline

                            [datasource = pod] {
                                query: EmailMessage Message Note Photo
                                edgeTargetsOperator: "OR"
                                filter: {
                                    edgeTargets: {
                                        sender: {{.account.uid}}
                                        includes: {{uid}}
                                    }
                                }
                            }

                            [renderer = timeline] {
                                timeProperty: dateCreated
                            }
                        }
                    }
                }
            }

        }
    }
}

Person > list {
    onPress: openView {
        renderer: singleitem
        mainView: false
    }
    VStack {
        alignment: left
        padding: 0 0 0 18

        HStack {
            alignment: left
            spacing: 15

            Image {
                image: {{.profilePicture}}
                sizingMode: fill
                minHeight: 50
                maxHeight: 50
                minWidth: 50
                maxWidth: 50
                cornerRadius: 20
            }

            VStack {
                spacing: 4
                Text {
                    text: "{.firstName} {.lastName}"
                    font: 16 regular
                }
                Text {
                    text: "{.relation[.firstName = 'Alice'].lastName}"
                    font: 14 regular
                    color: secondary
                }
            }
            Spacer
            Image {
                systemName: "ellipsis"
                color: memriBlue
                font: 24 light
                padding: 5 15 5 8
            }
        }
    }
}

Person > grid {
    onPress: openView {
        renderer: generalEditor
    }
    VStack {
        alignment: center

        Image {
            image: {{.profilePicture}}
            cornerRadius: 10
            sizingMode: fill
            sizingMode: fit
        }
        Text {
            text: "{.firstName} {.lastName}"
            font: 12 semibold
            textAlign: center
            color: primary
            padding: 3 0 0 0
        }
    }
}

Person > timeline {
    [datasource = pod] {
        query: EmailMessage Message Note Photo
        edgeTargetsOperator: "OR"
        filter: {
            edgeTargets: {
                sender: {{.account.uid}}
                includes: {{uid}}
            }
        }
    }
}

.allPeople {
    title: "People"
    defaultRenderer: list
    emptyResultText: "There are no people here yet"

    [datasource = pod] {
        query: "Person"
        sort: {
            edgeSource: {
                edgeTarget: {
                    relationship: {{me.uid}}
                }
                name: relationship
                sortProperty: value
                sortAscending: false
            }
        }
    }

    actionButton:
    [
        openView {
            icon: "person.circle"
            viewName: "user"
            clearStack: true
        },
        openView {
            icon: "person.2.fill"
            viewName: "allPeople"
            clearStack: true
        }]

        filterButtons: showStarred toggleFilterPanel

        [renderer = list] {
            contextMenu: [
                star { title: "Favourite" }
                ]
        }

        [renderer = grid] {
            spacing: 10
            edgeInset: 10
            columnSize: 100

            contextMenu: [
                star { title: "Favourite" }
                ]
        }

        [renderer = map] {
            address: {{.address[]}}
            label: "{.firstName}"
        }

}
