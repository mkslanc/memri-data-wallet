
[language = "English"] {
    sharewith: "Share with..."
    addtolist: "Add to list..."
    duplicate: "Duplicate"
    showtimeline: "Show Timeline"
    timelineof: "Timeline of this"
    starred: "Starred"
    all: "All"
}
[language = "Dutch"] {
    sharewith: "Deel met..."
    addtolist: "Voeg toe aan lijst..."
    duplicate: "Dupliceer"
    showtimeline: "Toon Tijdslijn"
    timelineof: "Tijdslijn van deze"
    starred: "Favoriete"
    all: "Alle"
}

.defaultButtonsForItem {
    editActionButton: toggleEditMode
    filterButtons: [
        openView {
            icon: "increase.indent"
            title: "{$showtimeline}"

            view: {
                defaultRenderer: timeline

                [datasource = pod] {
                    query: "AuditItem AND ANY allEdges.targetItemID = {.uid}"
                    sortProperty: dateCreated
                    sortAscending: true
                }

                [renderer = timeline] {
                    timeProperty: dateCreated
                }
            }
        }
        showContextPane
        ]

        contextPane {
            buttons: star schedule

            actions: [
                showOverlay { title: "{$sharewith}" }
                addToPanel { title: "{$addtolist}" }
                duplicate { title: "{$duplicate} {type}" }
                ]

                navigate: [
                    openView {
                        title: "{$timelineof} {type.lowercased()}"
                        view: {
                            defaultRenderer: timeline

                            [datasource = pod] {
                                query: "AuditItem AND ANY allEdges.targetItemID = {.uid}"
                                sortProperty: dateCreated
                                sortAscending: true
                            }

                            [renderer = timeline] {
                                timeProperty: dateCreated
                            }
                        }
                    }
                    openViewByName {
                        title: "{$starred} {type.plural()}"
                        viewName: "filter-starred"
                        viewArguments: {
                            include: "all-{type}"
                        }
                    }
                    openViewByName {
                        title: "{$all} {type.lowercased().plural()}"
                        viewName: "all-{type}"
                    }
                    ]
        }
}

Person {
    contextPane: {
        buttons: star schedule
        changeLog: "{.describeChangelog()}"
        labels: {{.label[]}}
        navigate: [
            openView
            {
                renderer: generalEditor
                title: "Person"
                view: {
                    defaultRenderer: timeline

                    [datasource = pod] {
                        query: "AuditItem AND ANY allEdges.targetItemID = {.uid}"
                        sortAscending: true
                        sortProperty: dateCreated
                    }

                    [renderer = timeline] {
                        timeProperty: dateCreated
                    }
                }
            }
            openViewByName
            {
                renderer: "grid"
                title: "{$starred} {type.plural()}"
                viewArguments: {
                    include: "all-{type}"
                }
                viewName: "filter-starred"
            }
            openSessionByName
            {
                sessionName: "all-person"
                title: "All Persons"
            }
        ]
        title: "{.firstName} {.lastName}"
    }
    defaultRenderer: singleitem
    editActionButton: toggleEditMode
    showTopBar: false

    [renderer = generalEditor] {
        changeLog: {
            title: "Change Log"

            SubView {
                height: 165
                view: {
                    arguments: {
                        readOnly: true
                        showBottomBar: false
                        showToolbar: false
                    }
                    defaultRenderer: list
                    viewName: AuditItem

                    [datasource = pod] {
                        filter: {
                            edgeSources: {
                                changelog: {{uid}}
                            }
                        }
                        query: AuditItem
                    }
                }
            }
        }
        cryptoKeys: {
            EditorRow: {
                title: "{.name}"

                Text {
                    text: "{.key}"
                }
            }
        }
        layout: [
            {
                exclude: labels
                section: profilePicture
            }
            {
                fields: firstName lastName
                section: names
            }
            {
                section: picturesOfPerson
            }
            {
                edges: hasPhoneNumber
                section: phoneNumbers
                type: PhoneNumber
            }
            {
                edges: relationship
                section: relationships
                type: Person
            }
            {
                edges: address
                section: addresses
                type: Address
            }
            {
                edges: website
                section: websites
                type: Website
            }
            {
                edges: company
                section: companies
                type: Company
            }
            {
                edges: diet
                section: diets
                type: Diet
            }
            {
                edges: medicalCondition
                section: medicalConditions
                type: MedicalCondition
            }
            {
                edges: cryptoKey
                section: cryptoKeys
                type: CryptoKey
            }
            {
                edges: onlineProfile
                section: onlineProfiles
                type: OnlineProfile
            }
            {
                fields: *
                section: other
            }
            {
                section: dates
            }
            {
                section: changeLog
            }
        ]
        onlineProfiles: {
            EditorRow: {
                title: "{.itemType}"

                VStack {
                    cornerRadius: 5

                    Text {
                        text: "{.handle}"
                    }
                }
            }
        }
        picturesOfPerson: {
            title: "Photos of {.firstName} {.lastName}"

            Grid {
                emptyResultText: "There are no photos here yet"
                height: 200
                items: {{.~includes[]}}
                minColumnHeight: 80
                spacing: 1

                ForEach {
                    items: {{.~includes[]}}

                    Image {
                        background: background
                        image: {{.file}}
                        sizingMode: fill
                        width: 90
                    }
                }
            }
        }
        profilePicture: {
            showTitle: false

            HStack {
                alignment: center
                maxHeight: 180
                minHeight: 180

                ZStack {
                    alignment: center
                    border: #fff 27
                    cornerRadius: 25
                    maxHeight: 140
                    maxWidth: 140
                    padding: 12

                    Image {
                        image: {{.profilePicture}}
                        sizingMode: fill
                    }

                    HStack {
                        alignment: center
                        maxHeight: 140
                        maxWidth: 140
                        show: {{!readOnly}}

                        ActionButton {
                            alignment: center
                            background: #eee
                            color: #434343
                            cornerRadius: 25
                            font: 14 regular
                            maxHeight: 50
                            maxWidth: 50
                            onPress: [
                                openViewByName
                                {
                                    renderAs: popup
                                    title: "Edit"
                                    viewArguments: {
                                        distinct: true
                                        edgeType: "profilePicture"
                                        editMode: false
                                        onPress: [
                                            link
                                            {
                                                distinct: {{distinct}}
                                                edgeType: {{edgeType}}
                                                subject: {{subject}}
                                            }
                                            closePopup
                                        ]
                                        query: "Photo"
                                        renderer: "grid"
                                        title: "Choose a photo"
                                        type: Photo
                                    }
                                    viewName: "itemByQuery"
                                }
                            ]
                        }
                    }
                }

                VStack {
                    spacing: 6

                    Text {
                        font: 20 bold
                        text: "{.firstName} {.lastName}"
                    }

                    Text {
                        show: {{!.label}}
                        text: "no labels yet"
                    }

                    FlowStack {
                        list: {{.label[]}}
                        spacing: 5

                        Button {
                            onPress: [
                                openView
                                {
                                    viewArguments: {
                                        name: "{.name}"
                                        uid: {{.uid}}
                                    }
                                    viewName: "allItemsWithLabel"
                                }
                            ]

                            VStack {
                                background: {{.color}}
                                cornerRadius: 5

                                Text {
                                    color: #fff
                                    font: 16 semibold
                                    padding: 5 8 5 8
                                    text: "{.name}"
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    [renderer = timeline] {
        timeProperty: dateCreated
    }
}

Person > singleitem {
    VStack {
        alignment: topleft

        VStack {
            alignment: left
            ZStack {
                alignment: bottomright
                Image {
                    image: {{.profilePicture}}
                    sizingMode: fill
                }


                ActionButton {
                    onPress: star

                }

            }

            Text {
                padding: 27 0 0 33
                font: headline1
                text: "{.firstName} {.lastName}"
            }

            HStack {
                padding: 31 0 0 20
                spacing: 10

            }

            HStack {
                padding: 10 0 0 20
                spacing: 10


            }

        }
    }
}

Person > list {
    onPress: openView {
        renderer: singleitem
    }
    VStack {
        alignment: left
        padding: 0 0 0 18

        HStack {
            alignment: left
            spacing: 15

            Image {
                image: {{.profilePicture}}
                sizingMode: fill
                minHeight: 50
                maxHeight: 50
                minWidth: 50
                maxWidth: 50
                cornerRadius: 20
            }

            VStack {
                spacing: 4
                Text {
                    text: "{.firstName} {.lastName}"
                    font: 16 regular
                }
                Text {
                    text: "{.relation[.firstName = 'Alice'].lastName}"
                    font: 14 regular
                    color: secondary
                }
            }
            Spacer
            Image {
                systemName: "ellipsis"
                color: memriBlue
                font: 24 light
                padding: 5 15 5 8
            }
        }
    }
}

Person > grid {
    onPress: [
        openView
        {
            renderer: singleItem
        }
    ]

    VStack {
        alignment: center

        Image {
            cornerRadius: 10
            image: {{.profilePicture}}
            sizingMode: fit
        }

        Text {
            color: primary
            font: 12 semibold
            padding: 3 0 0 0
            text: "{.firstName} {.lastName}"
            textAlign: center
        }
    }
}

Person > timeline {
    [datasource = pod] {
        query: EmailMessage Message Note Photo
        edgeTargetsOperator: "OR"
        filter: {
            edgeTargets: {
                sender: {{.account.uid}}
                includes: {{uid}}
            }
        }
    }
}

.allPeople {
    actionButton: [
        openView
        {
            clearStack: true
            icon: "person.circle"
            viewName: "user"
        }
        openView
        {
            clearStack: true
            icon: "person.2.fill"
            viewName: "allPeople"
        }
    ]
    defaultRenderer: list
    emptyResultText: "There are no people here yet"
    filterButtons: showStarred toggleFilterPanel
    title: "People"

    [datasource = pod] {
        edges: ["profilePicture.file"]
        query: "Person"
    }

    [renderer = list] {
        contextMenu: [
            star
            {
                title: "Favourite"
            }
        ]
    }

    [renderer = grid] {
        columnSize: 100
        contextMenu: [
            star
            {
                title: "Favourite"
            }
        ]
        edgeInset: 10
        spacing: 10
    }

    [renderer = map] {
        address: {{.address[]}}
        label: "{.firstName}"
    }
}
