
MessageChannel {
    title: "Channel Info"
    defaultRenderer: generalEditor
    
    [renderer = generalEditor] {
        layout: [
            { section: profilePicture }
            { section: other, fields: * }
            { section: dates }
            ]

            profilePicture {
                showTitle: false

                VStack {
                    alignment: bottomright
                    maxHeight: 300

                    Image {
                        image: {{.receiver.owner.profilePicture}}
                        sizingMode: fill
                    }

                    HStack {
                        padding: 10
                        background: #efef /* TODO: Support opacity in the background */

                        MemriButton {
                            item: {{.receiver.owner}}
                        }
                        Spacer
                        MemriButton {
                            item: {{.receiver.network}}
                        }
                    }
                }
            }
    }
}

.messageChannelView {
    cols: 8
    defaultRenderer: {{channel.~messageChannel[limit: 3].count() = 2 AND channel.~messageChannel.type != "Message" ? "singleItem" : "list"}}
    item: {{.~messageChannel}}
    showTopBar: false
    title: {{channel.~messageChannel[sort: 'dateSent DESC', limit: 1].first().subject OR channel.receiver.owner.fullname() OR channel.name OR channel.topic}}

    [datasource = pod] {
        filter: {
            edgeTargets: {
                messageChannel: {{channelUID}}
            }
        }
        query: Message EmailMessage
        sortAscending: false
        sortProperty: dateSent
    }

    [renderer = list] {
        edgeInset: 0
        hideSeparators: {{channel.~messageChannel.itemtype() = "Message" ? true : false}}
        isReverse: true
    }

    Message > list {
    }

    Message > timeline {
        onPress: noop
    }

    EmailMessage > list {
        onPress: [
            openView
            {
                renderer: singleItem
            }
        ]
    }

    EmailMessage > singleItem {
        onPress: noop
    }

    [renderer = singleItem] {
        scrollable: false
    }

    MessageChannel > singleItem {
        onPress: noop
        scrollable: false

        VStack {
            SubView {
                initialItem: {{.~messageChannel}}
                view: {
                    defaultRenderer: singleItem

                    [renderer = singleItem] {
                        scrollable: false
                    }
                }
            }
        }
    }
}


MessageChannel > list {
    onPress: [
        openView
        {
            clearStack: true
            viewArguments: {
                addPageIfMissing: true
                channel: {{.}}
                channelUID: {{.uid}}
                pageLabel: "inboxData"
                readOnly: true
            }
            viewName: messageChannelView
        }
    ]

    HStack {
        alignment: left
        padding: 10 0 10 0

        VStack {
            alignment: topleft

            Circle {
                color: {{.generaterandom("string", "color")}}
                height: 30
                show: {{.~messageChannel.itemType() = "EmailMessage"}}
                width: 30
            }

            Image {
                cornerRadius: 50
                image: {{.~messageChannel.sender.owner.profilePicture OR .photo OR .receiver.profilePicture OR .receiver.owner.profilePicture OR .~messageChannel.sender.profilePicture OR "assets/images/person.png"}}
                maxHeight: 30
                maxWidth: 30
                minHeight: 30
                minWidth: 30
                show: {{.~messageChannel.itemType() != "EmailMessage"}}
                sizingMode: fill
            }
        }

        VStack {
            alignment: topleft
            padding: 0 0 0 15

            Text {
                color: #333333
                font: 13 regular
                text: {{.name OR .~messageChannel.sender.displayName OR .~messageChannel.sender.identifier}}
            }

            Text {
                color: #999999
                font: body_tiny
                show: {{.~messageChannel.sender.displayName}}
                text: {{.~messageChannel.sender.identifier}}
            }
        }

        Spacer

        VStack {
            padding: 0 19 0 0

            Text {
                color: #989898
                font: body_tiny
                text: "{.~messageChannel.last().dateSent.format('dd MMMM yyyy')}"
            }
        }
    }
}

.allMessageChannels {
    title: "Channels"
    defaultRenderer: list
    filterButtons: [ showStarred toggleFilterPanel ]


    [datasource = pod] {
        query: "MessageChannel"
        sort: {
            targetType: "Message"
            edgeTarget: {
                name: ~messageChannel
                sortProperty: dateSent
                sortAscending: false
            }
        }
    }
}

MessageChannel > timeline {
    onPress: openView {
        viewName: messageChannelView
        viewArguments {
            channelUID: {{.uid}}
            channel: {{.}}
        }
    }
    
    TimelineItem {
        icon: "bubble.left.fill"
        title: {{.receiver.owner.fullName()}}
        text: {{.~messageChannel[sort: 'dateSent DESC', limit: 1].first().content.plainString() or "No messages"}}
    }
}