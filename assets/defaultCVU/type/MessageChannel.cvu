
MessageChannel {
    title: "Channel Info"
    defaultRenderer: generalEditor
    
    [renderer = generalEditor] {
        layout: [
            { section: profilePicture }
            { section: other, fields: * }
            { section: dates }
            ]

            profilePicture {
                showTitle: false

                VStack {
                    alignment: bottomright
                    maxHeight: 300

                    Image {
                        image: {{.receiver.owner.profilePicture}}
                        sizingMode: fill
                    }

                    HStack {
                        padding: 10
                        background: #efef /* TODO: Support opacity in the background */

                        MemriButton {
                            item: {{.receiver.owner}}
                        }
                        Spacer
                        MemriButton {
                            item: {{.receiver.network}}
                        }
                    }
                }
            }
    }
}

.messageChannelView {
    defaultRenderer: list
    title: {{channel.~messageChannel[sort: 'dateSent DESC', limit: 1].first().subject or channel.receiver.owner.fullname() or channel.name or channel.topic}}
    cols: 6

    titleActionButton: openView {
        item: {{channel}}
    }

    [datasource = pod] {
        query: Message EmailMessage
        filter: {
            edgeTargets: {
                messageChannel: {{channelUID}}
            }
        }
        sortProperty: dateSent
        sortAscending: false
    }

    [renderer = list] {
        isReverse: true
        hideSeparators: false
    }

    Message > list {
        onPress: doNothing
    }

    Message > timeline {
        onPress: doNothing
    }
}


MessageChannel > list {

    onPress: openView {
        viewName: messageChannelView
        clearStack: true
        viewArguments {
            channelUID: {{.uid}}
            channel: {{.}}

        }
    }

    VStack {
        alignment: topleft

        HStack {
            alignment: left

            Image {
                image: {{.photo or .receiver.profilePicture or .receiver.owner.profilePicture or "assets/images/person.png"}}
                sizingMode: fill
                minHeight: 30
                maxHeight: 30
                minWidth: 30
                maxWidth: 30
                cornerRadius: 50
            }


            Text {
                text: {{.name or .receiver.owner.fullName() or .~messageChannel.sender.identifier }}
                font: 12 regular
                color: #737373
            }

            Spacer
            Text {
                text: "{.~messageChannel[sort: 'dateSent DESC', limit: 1].first().dateSent}"
                color: #989898
                padding: 0 19 0 0
                font: 10 regular
            }
        }

        Text {
            text: "{.~messageChannel[sort: 'dateSent DESC', limit: 1].first().photo ? '[Photo]' : .~messageChannel[sort: 'dateSent DESC', limit: 1].first().subject or .~messageChannel[sort: 'dateSent DESC', limit: 1].first().content.plainString() or 'No messages yet'}"
            lineLimit: 1
            font: 12 regular
            color: #333333
        }

        Text {
            show: {{.~messageChannel[sort: 'dateSent DESC', limit: 1].first().subject}}
            text: {{.~messageChannel[sort: 'dateSent DESC', limit: 1].first().content.plainString() or ""}}
            lineLimit: 1
            font: 10 regular
            color: #989898
        }

    }
}

.allMessageChannels {
    title: "Channels"
    defaultRenderer: list
    filterButtons: [ showStarred toggleFilterPanel ]


    [datasource = pod] {
        query: "MessageChannel"
        sort: {
            targetType: "Message"
            edgeTarget: {
                name: ~messageChannel
                sortProperty: dateSent
                sortAscending: false
            }
        }
    }
}

MessageChannel > timeline {
    onPress: openView {
        viewName: messageChannelView
        viewArguments {
            channelUID: {{.uid}}
            channel: {{.}}
        }
    }
    
    TimelineItem {
        icon: "bubble.left.fill"
        title: {{.receiver.owner.fullName()}}
        text: {{.~messageChannel[sort: 'dateSent DESC', limit: 1].first().content.plainString() or "No messages"}}
    }
}
