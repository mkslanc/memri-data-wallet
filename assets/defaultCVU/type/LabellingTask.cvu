LabellingTask {
    defaultRenderer: singleItem
    showSearchBar: false
    showBottomBar: false
    showTopBar: false
    title: "Configure labelling editor"

    [renderer = singleItem] {
        scrollable: true
    }
}
.labelling-task {
    cols: 9
    defaultRenderer: singleItem
    title: "Set up your data"

    [renderer = singleItem] {
        scrollable: false
    }

    LabellingTask > singleItem {
        VStack {
            alignment: topleft
            padding: 60 0 0 0

            Text {
                color: #333333
                font: headline2
                padding: 0 0 10 0
                text: "Configure labelling editor"
            }

            Text {
                font: bodyText1
                padding: 0 0 20 0
                text: "Choose the type of  text classification you want to use."
            }

            SubView {
                height: 60
                id: taskType
                maxWidth: 550
                view: {
                    defaultRenderer: custom
                    editMode: true
                    viewArguments: {
                        task: {{task}}
                    }

                    [datasource = pod] {
                        query: TextClassification
                        sortAscending: true
                        sortProperty: dateModified
                    }

                    [renderer = custom] {
                        Dropdown {
                            edgeName: "taskType"
                            item: {{task}}
                            list: {{items}}
                            maxWidth: 550
                            onChange: [
                                link
                                {
                                    distinct: true
                                    edgeType: "taskType"
                                    subject: {{task}}
                                }
                            ]

                            Text {
                                color: #FE570F
                                font: bodyText1
                                lineLimit: 1
                                text: {{.name}}
                            }
                        }
                    }
                }
            }

            Text {
                font: bodyText1
                padding: 60 0 20 0
                text: "Define the labels you want to use in your app:"
            }

            FlowStack {
                list: {{.labelOption[]}}
                spacing: 15

                Wrap {
                    background: #F5F5F5
                    cornerRadius: 20

                    Text {
                        color: #333333
                        font: bodyText1
                        padding: 5 9 5 10
                        text: "{.name}"
                    }

                    Button {
                        isLink: true
                        onPress: delete
                        padding: 0 11 0 0

                        Text {
                            text: "x"
                            textAlign: center
                        }
                    }
                }
            }

            HStack {
                alignment: center
                background: #F0F0F0

                Textfield {
                    background: #F0F0F0
                    border: #333 1
                    hint: "e.g. positive"
                    minHeight: 15
                    rows: 1
                    value: {{.currentLabelOption}}
                    width: 150
                }

                Button {
                    onPress: [
                        validate
                        {
                            rules: [
                                {
                                    error: "Please fill the label name."
                                    expression: {{.currentLabelOption}}
                                }
                            ]
                        }
                        addItem
                        {
                            openNewView: false
                            template: {
                                _type: "LabelOption"
                                name: "{.currentLabelOption}"
                                ~labelOption: {{.}}
                            }
                        }
                        setProperty
                        {
                            property: "currentLabelOption"
                            subject: {{.}}
                            value: ""
                        }
                    ]
                    styleName: primaryButton

                    Text {
                        text: "Add new label"
                        textAlign: center
                    }
                }
            }

            Wrap {
                alignment: left
                padding: 50 0 0 0
                spacing: 15

                Button {
                    onPress: [
                        validate
                        {
                            rules: [
                                {
                                    error: "Please add labels."
                                    expression: {{.labelOption.count() > 0}}
                                }
                            ]
                        }
                        openView
                        {
                            viewArguments: {
                                pageLabel: "~main"
                            }
                            viewName: "labellingPreview"
                        }
                    ]
                    styleName: primaryButton

                    Text {
                        text: "Preview editor"
                        textalign: bottom
                    }

                    Image {
                        alignment: center
                        bundleImage: "ico_arrow"
                        isVector: true
                        padding: 0 0 0 15
                    }
                }

                Button {
                    onPress: [
                        back
                        {
                            pageLabel: "~main"
                        }
                    ]

                    Text {
                        color: #333333
                        font: button_label
                        text: "Back to data setup"
                    }
                }
            }
        }
    }
}

LabellingTask > list {
    onPress: noop

    VStack {
        alignment: left

        HStack {
            alignment: left

            Text {
                text: {{.name or "Draft: Labelling app"}}
                font: 18 semibold
                color: primary
                padding: 0 0 3 0
            }
        }

    }
}

.allLabellingTasks {
    name: "all-labelling-tasks"
    title: "Data tasks"
    emptyResultText: "There are no Labelling tasks"
    defaultRenderer: singleRenderer
    sortFields: dateModified dateCreated

    [datasource = pod] {
        query: LabellingTask
        sortProperty: dateModified
        sortAscending: true
    }

}

.labelling-task-overview {
    cols: 12
    defaultRenderer: scene
    title: "Configure labelling editor"

    [renderer = scene] {
        pages: {
            labellingTask: "labelling-task"
            projectSummary: "project-summary"
        }
        viewArguments: {
            selectedDataset: {{.~labellingTask.last()}}
        }
    }
}