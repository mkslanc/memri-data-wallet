LabellingTask {
    defaultRenderer: singleItem
    showSearchBar: false
    showBottomBar: false
    showTopBar: false
    title: "Configure labelling editor"

    [renderer = singleItem] {
        scrollable: true
    }
}

.labelling-task {
    cols: 9
    defaultRenderer: singleItem
    title: "Set up your data"

    [renderer = singleItem] {
        scrollable: false
    }

    LabellingTask > singleItem {
        viewArguments: {
            datasources: {
                datasetEntries: {
                    filter: {
                        edgeSources: {
                            entry: {{.~labelOption.~labellingTask}}
                        }
                    }
                    query: DatasetEntry
                }
                labelAnnotations: {
                    filter: {
                        edgeSources: {
                            annotation: {{datasourceItems("datasetEntries")}}
                        }
                        properties: {
                            labelValue: {{.name}}
                        }
                    }
                    query: CategoricalLabel
                }
            }
        }

        VStack {
            alignment: topleft
            padding: 60 0 0 0

            Text {
                color: #333333
                font: 12
                text: "STEP 2"
            }

            Text {
                color: #333333
                font: headline1
                padding: 0
                text: "Add labels you want to use in your app."
            }

            RichText {
                color: #333333
                font: bodyText1
                spans: [
                    {
                        text: "Add the labels you want to use on your data and in your app.  "
                    }
                    {
                        font: semibold
                        text: "You may only use one label per data item. "
                    }
                    {
                        text: "For example, if you are building a sentiment analysis app, add: "
                    }
                    {
                        font: semibold
                        text: "positive"
                    }
                    {
                        text: ", "
                    }
                    {
                        font: semibold
                        text: "negative"
                    }
                    {
                        text: " and "
                    }
                    {
                        font: semibold
                        text: "neutral"
                    }
                    {
                        text: "to label each message."
                    }
                ]
            }

            Text {
                color: #333333
                font: bodyText1
                padding: 5 0 10 0
                text: "Use the index numbers for keyboard shortcuts to help you label at warp speed!"
            }

            FlowStack {
                axis: "vertical"
                list: {{.labelOption[]}}
                spacing: 15

                Wrap {
                    background: #F5F5F5
                    cornerRadius: 20

                    Text {
                        color: #333333
                        font: bodyText1
                        padding: 5 9 5 10
                        text: "{.name}"
                    }

                    Button {
                        isLink: true
                        onPress: [
                            deleteItems
                            {
                                subjectItems: {{datasourceItems("labelAnnotations")}}
                            }
                            delete
                        ]
                        padding: 0 11 0 0

                        Text {
                            text: "x"
                            textAlign: center
                        }
                    }
                }
            }

            HStack {
                alignment: center
                background: #F0F0F0

                Textfield {
                    autoFocus: true
                    background: #F0F0F0
                    border: #333 1
                    hint: "e.g. positive"
                    minHeight: 15
                    onSubmit: [
                        validate
                        {
                            rules: [
                                {
                                    error: "Please fill the label name."
                                    expression: {{.currentLabelOption}}
                                }
                            ]
                        }
                        addItem
                        {
                            openNewView: false
                            template: {
                                _type: "LabelOption"
                                name: "{.currentLabelOption}"
                                ~labelOption: {{.}}
                            }
                        }
                        setProperty
                        {
                            property: "currentLabelOption"
                            subject: {{.}}
                            value: ""
                        }
                    ]
                    rows: 1
                    value: {{.currentLabelOption}}
                    width: 150
                }

                Button {
                    background: #333
                    onPress: [
                        validate
                        {
                            rules: [
                                {
                                    error: "Please fill the label name."
                                    expression: {{.currentLabelOption}}
                                }
                            ]
                        }
                        addItem
                        {
                            openNewView: false
                            template: {
                                _type: "LabelOption"
                                name: "{.currentLabelOption}"
                                ~labelOption: {{.}}
                            }
                        }
                        setProperty
                        {
                            property: "currentLabelOption"
                            subject: {{.}}
                            value: ""
                        }
                    ]
                    styleName: primaryButton

                    Text {
                        text: "Add new label"
                        textAlign: center
                    }
                }
            }

            Wrap {
                alignment: left
                padding: 50 0 0 0
                spacing: 15

                Button {
                    onPress: [
                        validate
                        {
                            rules: [
                                {
                                    error: "Please add labels."
                                    expression: {{.labelOption.count() > 0}}
                                }
                            ]
                        }
                        openView
                        {
                            viewArguments: {
                                pageLabel: "~main"
                            }
                            viewName: "labelling"
                        }
                    ]
                    styleName: primaryButton

                    Text {
                        text: "Next"
                        textalign: bottom
                    }

                    Image {
                        alignment: center
                        bundleImage: "ico_arrow"
                        isVector: true
                        padding: 0 0 0 15
                    }
                }

                Button {
                    onPress: [
                        back
                        {
                            pageLabel: "~main"
                        }
                    ]
                    styleName: secondaryButton

                    Text {
                        font: button_label
                        text: "Back to data setup"
                    }
                }
            }
        }
    }
}

LabellingTask > list {
    onPress: noop

    VStack {
        alignment: left

        HStack {
            alignment: left

            Text {
                text: {{.name or "Draft: Labelling app"}}
                font: 18 semibold
                color: primary
                padding: 0 0 3 0
            }
        }

    }
}

.allLabellingTasks {
    name: "all-labelling-tasks"
    title: "Data tasks"
    emptyResultText: "There are no Labelling tasks"
    defaultRenderer: singleRenderer
    sortFields: dateModified dateCreated

    [datasource = pod] {
        query: LabellingTask
        sortProperty: dateModified
        sortAscending: true
    }

}

.labelling-task-overview {
    cols: 12
    defaultRenderer: scene
    title: "Configure labelling editor"

    [renderer = scene] {
        pages: {
            labellingTask: "labelling-task"
            projectSummary: "project-summary"
        }
        viewArguments: {
            selectedDataset: {{.~labellingTask.last()}}
        }
    }
}